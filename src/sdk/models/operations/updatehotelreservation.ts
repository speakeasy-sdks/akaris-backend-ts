/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";

export class UpdateHotelReservationRequest extends SpeakeasyBase {
    /**
     * Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=Identifier" })
    identifier: string;

    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    reservationDetailWrapper: shared.ReservationDetailWrapper;

    /**
     * Identifier used to correlate API invocations across long-running or multi-call business flows.
     */
    @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=TraceId" })
    traceId?: string;

    /**
     * Identifies the Travelport access group with which the caller is associated
     */
    @SpeakeasyMetadata({
        data: "header, style=simple;explode=false;name=XAUTH_TRAVELPORT_ACCESSGROUP",
    })
    xauthTravelportAccessgroup?: string;
}

export class UpdateHotelReservationResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * OK - Successful Response - 200
     */
    @SpeakeasyMetadata()
    reservationResponseWrapper?: shared.ReservationResponseWrapper;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;
}
