/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RFCDate } from "../../../sdk/types";
import { Accounting } from "./accounting";
import { AgencyServiceFee } from "./agencyservicefee";
import { DocumentOverrides } from "./documentoverrides";
import { FormOfPaymentID } from "./formofpaymentid";
import { Identifier } from "./identifier";
import { Offer } from "./offer";
import { OfferLink } from "./offerlink";
import { OrganizationLoyaltyProgram } from "./organizationloyaltyprogram";
import { Payment } from "./payment";
import { Preference } from "./preference";
import { PrimaryContact } from "./primarycontact";
import { Receipt } from "./receipt";
import { ReservationComment } from "./reservationcomment";
import { ReservationDisplaySequence } from "./reservationdisplaysequence";
import { ShoppingCart } from "./shoppingcart";
import { SpecialService } from "./specialservice";
import { TravelAgency } from "./travelagency";
import { Traveler } from "./traveler";
import { TravelerProduct } from "./travelerproduct";
import { Expose, Transform, Type } from "class-transformer";

export class ReservationDetail extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "@type" })
    atType: string;

    @SpeakeasyMetadata()
    @Expose({ name: "Accounting" })
    @Type(() => Accounting)
    accounting?: Accounting;

    @SpeakeasyMetadata({ elemType: AgencyServiceFee })
    @Expose({ name: "AgencyServiceFee" })
    @Type(() => AgencyServiceFee)
    agencyServiceFee?: AgencyServiceFee[];

    @SpeakeasyMetadata({ elemType: DocumentOverrides })
    @Expose({ name: "DocumentOverrides" })
    @Type(() => DocumentOverrides)
    documentOverrides?: DocumentOverrides[];

    @SpeakeasyMetadata({ elemType: FormOfPaymentID })
    @Expose({ name: "FormOfPayment" })
    @Type(() => FormOfPaymentID)
    formOfPayment?: FormOfPaymentID[];

    /**
     * A name assigned to a Reservation containing an offer with Passengerflight/Flight Quantity equal to or greater than 10
     */
    @SpeakeasyMetadata()
    @Expose({ name: "GroupName" })
    groupName?: string;

    /**
     * Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "Identifier" })
    @Type(() => Identifier)
    identifier?: Identifier;

    @SpeakeasyMetadata({ elemType: Offer })
    @Expose({ name: "Offer" })
    @Type(() => Offer)
    offer?: Offer[];

    @SpeakeasyMetadata({ elemType: OfferLink })
    @Expose({ name: "OfferLink" })
    @Type(() => OfferLink)
    offerLink?: OfferLink[];

    @SpeakeasyMetadata({ elemType: OrganizationLoyaltyProgram })
    @Expose({ name: "OrganizationLoyaltyProgram" })
    @Type(() => OrganizationLoyaltyProgram)
    organizationLoyaltyProgram?: OrganizationLoyaltyProgram[];

    @SpeakeasyMetadata({ elemType: Payment })
    @Expose({ name: "Payment" })
    @Type(() => Payment)
    payment?: Payment[];

    @SpeakeasyMetadata()
    @Expose({ name: "Preference" })
    @Type(() => Preference)
    preference?: Preference;

    @SpeakeasyMetadata({ elemType: PrimaryContact })
    @Expose({ name: "PrimaryContact" })
    @Type(() => PrimaryContact)
    primaryContact?: PrimaryContact[];

    @SpeakeasyMetadata({ elemType: Receipt })
    @Expose({ name: "Receipt" })
    @Type(() => Receipt)
    receipt?: Receipt[];

    @SpeakeasyMetadata({ elemType: ReservationComment })
    @Expose({ name: "ReservationComment" })
    @Type(() => ReservationComment)
    reservationComment?: ReservationComment[];

    @SpeakeasyMetadata()
    @Expose({ name: "ReservationDisplaySequence" })
    @Type(() => ReservationDisplaySequence)
    reservationDisplaySequence?: ReservationDisplaySequence;

    @SpeakeasyMetadata()
    @Expose({ name: "ShoppingCart" })
    @Type(() => ShoppingCart)
    shoppingCart?: ShoppingCart;

    @SpeakeasyMetadata({ elemType: SpecialService })
    @Expose({ name: "SpecialService" })
    @Type(() => SpecialService)
    specialService?: SpecialService[];

    @SpeakeasyMetadata()
    @Expose({ name: "TravelAgency" })
    @Type(() => TravelAgency)
    travelAgency?: TravelAgency;

    @SpeakeasyMetadata({ elemType: Traveler })
    @Expose({ name: "Traveler" })
    @Type(() => Traveler)
    traveler?: Traveler[];

    @SpeakeasyMetadata({ elemType: TravelerProduct })
    @Expose({ name: "TravelerProduct" })
    @Type(() => TravelerProduct)
    travelerProduct?: TravelerProduct[];

    /**
     * The auto delete date represents the date that the Reservation will be kept active. Also known as retention segment or retention date.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "autoDeleteDate" })
    @Type(() => String)
    @Transform(({ value }) => new RFCDate(value), { toClassOnly: true })
    autoDeleteDate?: RFCDate;

    /**
     * Internal ID
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * The notification date represents the date that the Reservation should be reviewed. Also known as ticket time limit date.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "notificationDate" })
    @Type(() => String)
    @Transform(({ value }) => new RFCDate(value), { toClassOnly: true })
    notificationDate?: RFCDate;
}
