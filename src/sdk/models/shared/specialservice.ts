/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AppliesTo } from "./appliesto";
import { Identifier } from "./identifier";
import { Status } from "./status";
import { TravelerIdentifier } from "./traveleridentifier";
import { Expose, Type } from "class-transformer";

export class SpecialService extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "@type" })
    atType: string;

    @SpeakeasyMetadata()
    @Expose({ name: "AppliesTo" })
    @Type(() => AppliesTo)
    appliesTo?: AppliesTo;

    /**
     * Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "Identifier" })
    @Type(() => Identifier)
    identifier?: Identifier;

    /**
     * The type of service animal accompanying the Traveler. If no service animal leave blank.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ServiceAnimalType" })
    serviceAnimalType?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "Status" })
    @Type(() => Status)
    status?: Status;

    @SpeakeasyMetadata()
    @Expose({ name: "TravelerIdentifier" })
    @Type(() => TravelerIdentifier)
    travelerIdentifier?: TravelerIdentifier;

    /**
     * Internal Id
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;
}
