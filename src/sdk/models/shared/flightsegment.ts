/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FlightID } from "./flightid";
import { Measurement } from "./measurement";
import { OperationalStatusENUM } from "./operationalstatusenum";
import { Expose, Type } from "class-transformer";

export class FlightSegment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "@type" })
    atType?: string;

    /**
     * Used for dimensional units (width, height, depth) or weight
     */
    @SpeakeasyMetadata()
    @Expose({ name: "CO2Actual" })
    @Type(() => Measurement)
    co2Actual?: Measurement;

    @SpeakeasyMetadata()
    @Expose({ name: "Flight" })
    @Type(() => FlightID)
    flight: FlightID;

    @SpeakeasyMetadata()
    @Expose({ name: "OperationalStatus" })
    @Type(() => OperationalStatusENUM)
    operationalStatus?: OperationalStatusENUM;

    /**
     * If present and true, the Segments in this Connection must be sold and cancelled together.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "boundFlightsInd" })
    boundFlightsInd?: boolean;

    /**
     * The actual duration (in minutes) between
     */
    @SpeakeasyMetadata()
    @Expose({ name: "connectionDuration" })
    connectionDuration?: string;

    /**
     * Local indentifier within a given message for this object.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * Segment sequence
     */
    @SpeakeasyMetadata()
    @Expose({ name: "sequence" })
    sequence: number;
}
