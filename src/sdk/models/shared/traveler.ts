/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RFCDate } from "../../../sdk/types";
import { Address } from "./address";
import { AlternateContact } from "./alternatecontact";
import { Comments } from "./comments";
import { CustomerLoyalty } from "./customerloyalty";
import { Email } from "./email";
import { GenderEnum } from "./genderenum";
import { Identifier } from "./identifier";
import { PersonName } from "./personname";
import { RailDiscountCard } from "./raildiscountcard";
import { Telephone } from "./telephone";
import { TravelDocument } from "./traveldocument";
import { Expose, Transform, Type } from "class-transformer";

export class Traveler extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "@type" })
    atType: string;

    @SpeakeasyMetadata({ elemType: Address })
    @Expose({ name: "Address" })
    @Type(() => Address)
    address?: Address[];

    @SpeakeasyMetadata({ elemType: AlternateContact })
    @Expose({ name: "AlternateContact" })
    @Type(() => AlternateContact)
    alternateContact?: AlternateContact[];

    @SpeakeasyMetadata()
    @Expose({ name: "Comments" })
    @Type(() => Comments)
    comments?: Comments;

    @SpeakeasyMetadata({ elemType: CustomerLoyalty })
    @Expose({ name: "CustomerLoyalty" })
    @Type(() => CustomerLoyalty)
    customerLoyalty?: CustomerLoyalty[];

    @SpeakeasyMetadata({ elemType: Email })
    @Expose({ name: "Email" })
    @Type(() => Email)
    email?: Email[];

    /**
     * Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "Identifier" })
    @Type(() => Identifier)
    identifier?: Identifier;

    @SpeakeasyMetadata()
    @Expose({ name: "PersonName" })
    @Type(() => PersonName)
    personName: PersonName;

    @SpeakeasyMetadata({ elemType: RailDiscountCard })
    @Expose({ name: "RailDiscountCard" })
    @Type(() => RailDiscountCard)
    railDiscountCard?: RailDiscountCard[];

    @SpeakeasyMetadata({ elemType: Telephone })
    @Expose({ name: "Telephone" })
    @Type(() => Telephone)
    telephone?: Telephone[];

    @SpeakeasyMetadata({ elemType: TravelDocument })
    @Expose({ name: "TravelDocument" })
    @Type(() => TravelDocument)
    travelDocument?: TravelDocument[];

    @SpeakeasyMetadata()
    @Expose({ name: "TravelerRef" })
    travelerRef?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "accompaniedByInfantInd" })
    accompaniedByInfantInd?: boolean;

    /**
     * Date of Birth YYYY-MM-DD
     */
    @SpeakeasyMetadata()
    @Expose({ name: "birthDate" })
    @Type(() => String)
    @Transform(({ value }) => new RFCDate(value), { toClassOnly: true })
    birthDate?: RFCDate;

    /**
     * Gender Type Male, Female etc. This field is not used by Hotel APIs and will be ignored
     */
    @SpeakeasyMetadata()
    @Expose({ name: "gender" })
    gender?: GenderEnum;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * Nationality on country code ISO
     */
    @SpeakeasyMetadata()
    @Expose({ name: "nationality" })
    nationality?: string;

    /**
     * Passenger type code
     */
    @SpeakeasyMetadata()
    @Expose({ name: "passengerTypeCode" })
    passengerTypeCode?: string;
}
