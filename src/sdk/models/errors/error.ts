/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyMetadata } from "../../../internal/utils";
import { NameValuePair } from "./namevaluepair";
import { classToPlain, Expose, Type } from "class-transformer";

export class ErrorT extends Error {
    @SpeakeasyMetadata()
    @Expose({ name: "@type" })
    atType: string;

    /**
     * The Travelport standardized error or warning message
     */
    @SpeakeasyMetadata()
    @Expose({ name: "Message" })
    message: string;

    @SpeakeasyMetadata({ elemType: NameValuePair })
    @Expose({ name: "NameValuePair" })
    @Type(() => NameValuePair)
    nameValuePair?: NameValuePair[];

    /**
     * Http standard response code
     */
    @SpeakeasyMetadata()
    @Expose({ name: "StatusCode" })
    statusCode?: number;

    constructor(err?: ErrorT) {
        super();
        if (err) {
            Object.assign(this, err);
            this.message = JSON.stringify(
                classToPlain(err, { exposeUnsetFields: false, excludeExtraneousValues: true })
            );
        }

        this.name = "ErrorT";
        Object.setPrototypeOf(this, ErrorT.prototype);
    }
}
