/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyMetadata } from "../../../internal/utils";
import { classToPlain, Expose } from "class-transformer";

/**
 * Used for data stored in Name Value pairs
 */
export class NameValuePair extends Error {
    /**
     * Optional internally referenced id
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * Key
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value?: string;

    constructor(err?: NameValuePair) {
        super();
        if (err) {
            Object.assign(this, err);
            this.message = JSON.stringify(
                classToPlain(err, { exposeUnsetFields: false, excludeExtraneousValues: true })
            );
        }

        this.name = "NameValuePair";
        Object.setPrototypeOf(this, NameValuePair.prototype);
    }
}
