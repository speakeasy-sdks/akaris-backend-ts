/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { ErrorT } from "./error";
import { Warning } from "./warning";
import { classToPlain, Expose, Type } from "class-transformer";

export class Result extends Error {
    @SpeakeasyMetadata()
    @Expose({ name: "@type" })
    atType?: string;

    @SpeakeasyMetadata({ elemType: ErrorT })
    @Expose({ name: "Error" })
    @Type(() => ErrorT)
    error?: ErrorT[];

    @SpeakeasyMetadata({ elemType: Warning })
    @Expose({ name: "Warning" })
    @Type(() => Warning)
    warning?: Warning[];

    /**
     * The status of an error or warning
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status?: shared.ResultStatusEnum;

    constructor(err?: Result) {
        super();
        if (err) {
            Object.assign(this, err);
            this.message = JSON.stringify(
                classToPlain(err, { exposeUnsetFields: false, excludeExtraneousValues: true })
            );
        }

        this.name = "Result";
        Object.setPrototypeOf(this, Result.prototype);
    }
}
